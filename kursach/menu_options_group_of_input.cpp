
#include <iostream>
#include <fstream>
#include <string>
#include <iomanip>
using namespace std;

#include "structures_definition.h"
#include "additional_functions.h"
#include "constants.h"  
#include "group_delete.h"
#include "group_input.h"



// Функция опции меню: "Ввести все данные об автобусах из файла (или заменить все текущие данные)":
void console_menu_option_input_data_from_file(bus_station* bs) {


    cout << "\tВВОД ВСЕХ ДАННЫХ ИЗ ФАЙЛА (ИЛИ ЗАМЕНА ВСЕХ ТЕКУЩИХ ДАННЫХ)\n\n";


    // Объявление переменных:

    string user_input; // Пользовательский ввод


    // Сначала рассматривается случай, когда в базе данных установлен тип списка "односвязный линейный список":
    if (bs->bus_station_type_of_list == '1') {


        // Если в базе данных уже есть запись хотя бы об одном автобусе, то предупреждаем об этом пользователя и предлагаем ему вернуться в меню:
        if (bs->bus_station_buses_linear_singly_linked_list->buses_first_bus != NULL) {


            // Вывод на экран предупреждения о будущей потере данных:
            cout << "- Предупреждение: в базе данных уже хранятся данные об автобусах.\n"
                "Вы уверены, что хотите их стереть (1) или выберите вернуться в меню (2)?\n\n";


            // Получим от пользователя ответ:
            user_input = get_user_input_with_conditions(0, "is_1_or_2"); // Получение от пользователя ответа с проверкой на корректность: введена единица или двойка


            // Если пользователь выбрал вернуться в меню, то возвращаем его в меню:
            if (user_input == "2") {


                return; // Прерываем выполнение функции типа void. Возвращаемся в цикл меню.


            } // Конец блока "Если пользователь выбрал вернуться в меню, то возвращаем его в меню"

            else { // Если пользователь выбрал продолжить выполнение этой функции, стираем данные об автобусах:


                // Сотрем все имеющиеся данные (и из списка, и из файла хранения базы данных):
                delete_all_data(bs->bus_station_buses_linear_singly_linked_list);



            } // Конец блока "Если пользователь выбрал продолжить выполнение этой функции, стираем данные об автобусах"


        } // Конец блока "Если в базе данных уже есть запись хотя бы об одном автобусе, то предупреждаем
          // об этом пользователя и предлагаем ему вернуться в меню"


        // Вызовем функцию ввода всех данных из файла в линейный односвязный список:
        input_all_data_from_file(bs->bus_station_buses_linear_singly_linked_list);


    } // Конец блока "Сначала рассматривается случай, когда в базе данных установлен тип списка "односвязный линейный список""

    else { // Вторым рассматривается случай, когда в базе данных установлен тип списка "двухсвязный линейный список":


        // Если данные об автовокзале уже есть:
        if (bs->bus_station_buses_linear_doubly_linked_list->buses_first_bus != NULL) {


            // Предупреждение пользователя о возможной потере данных:
            cout << "- Предупреждение: данные об автовокзале непусты.\n"
                "Вы уверены, что хотите их стереть (1) или выберите вернуться в меню (2)?\n\n";


            // Получим от пользователя ответ:
            user_input = get_user_input_with_conditions(0, "is_1_or_2");


            // По желанию пользователя возвращаемся обратно в меню:
            if (user_input == "2") {


                return; // Возвращаемся в меню


            }
            else { // Стираем данные


                 // Сотрем все имеющиеся данные (и из списка, и из файла хранения базы данных):
                delete_all_data(bs->bus_station_buses_linear_doubly_linked_list);


            } // Конец блока "По желанию пользователя возвращаемся обратно в меню" или "Стираем данные"


        } // Конец блока "Если данные об автовокзале уже есть"


        // Вызовем функцию ввода всех данных из файла в линейный двухсвязный список:
        input_all_data_from_file(bs->bus_station_buses_linear_doubly_linked_list);



    } // Конец блока "Работа функции в случае линейного двухсвязного списка"

} // Конец блока "Вторым рассматривается случай, когда в базе данных установлен тип списка "двухсвязный линейный список""



// Ввести все данные об автобусах с клавиатуры (или заменить все текущие данные):
void console_menu_option_input_data_from_console(bus_station* bs){


    cout << "\tВВОД ВСЕХ ДАННЫХ ИЗ КОНСОЛИ (ИЛИ ЗАМЕНА ВСЕХ ТЕКУЩИХ ДАННЫХ)\n\n";


    // Объявление переменных:

    string user_input; // Пользовательский ввод


    // Сначала рассматривается случай, когда в базе данных установлен тип списка "односвязный линейный список":
    if (bs->bus_station_type_of_list == '1') {


        // Если в базе данных уже есть запись хотя бы об одном автобусе, то предупреждаем об этом пользователя и предлагаем ему вернуться в меню:
        if (bs->bus_station_buses_linear_singly_linked_list->buses_first_bus != NULL) {


            // Вывод на экран предупреждения о будущей потере данных:
            cout << "- Предупреждение: в базе данных уже хранятся данные об автобусах.\n"
                "Вы уверены, что хотите их стереть (1) или выберите вернуться в меню (2)?\n\n";


            // Получим от пользователя ответ:
            user_input = get_user_input_with_conditions(0, "is_1_or_2"); // Получение от пользователя ответа с проверкой на корректность: введена единица или двойка


            // Если пользователь выбрал вернуться в меню, то возвращаем его в меню:
            if (user_input == "2") {


                return; // Прерываем выполнение функции типа void. Возвращаемся в цикл меню.


            } // Конец блока "Если пользователь выбрал вернуться в меню, то возвращаем его в меню"

            else { // Если пользователь выбрал продолжить выполнение этой функции, стираем данные об автобусах:


                // Сотрем все имеющиеся данные (и из списка, и из файла хранения базы данных):
                delete_all_data(bs->bus_station_buses_linear_singly_linked_list);



            } // Конец блока "Если пользователь выбрал продолжить выполнение этой функции, стираем данные об автобусах"


        } // Конец блока "Если в базе данных уже есть запись хотя бы об одном автобусе, то предупреждаем
          // об этом пользователя и предлагаем ему вернуться в меню"


        // Вызовем функцию ввода всех данных из файла в линейный односвязный список:
        input_all_data_from_console(bs->bus_station_buses_linear_singly_linked_list);


    } // Конец блока "Сначала рассматривается случай, когда в базе данных установлен тип списка "односвязный линейный список""

    else { // Вторым рассматривается случай, когда в базе данных установлен тип списка "двухсвязный линейный список":


        // Если данные об автовокзале уже есть:
        if (bs->bus_station_buses_linear_doubly_linked_list->buses_first_bus != NULL) {


            // Предупреждение пользователя о возможной потере данных:
            cout << "- Предупреждение: данные об автовокзале непусты.\n"
                "Вы уверены, что хотите их стереть (1) или выберите вернуться в меню (2)?\n\n";


            // Получим от пользователя ответ:
            user_input = get_user_input_with_conditions(0, "is_1_or_2");


            // По желанию пользователя возвращаемся обратно в меню:
            if (user_input == "2") {


                return; // Возвращаемся в меню


            }
            else { // Стираем данные


                 // Сотрем все имеющиеся данные (и из списка, и из файла хранения базы данных):
                delete_all_data(bs->bus_station_buses_linear_doubly_linked_list);


            } // Конец блока "По желанию пользователя возвращаемся обратно в меню" или "Стираем данные"


        } // Конец блока "Если данные об автовокзале уже есть"


        // Вызовем функцию ввода всех данных из файла в линейный двухсвязный список:
        input_all_data_from_console(bs->bus_station_buses_linear_doubly_linked_list);



    } // Конец блока "Работа функции в случае линейного двухсвязного списка"

}



// Добавить данные об автобусах из файла:
void console_menu_option_add_data_from_file(bus_station* bs) {


    cout << "\tДОБАВЛЕНИЕ ДАННЫХ ИЗ ФАЙЛА\n\n";



    // Объявление переменных:

    string user_input; // Пользовательский ввод


    // Сначала рассматривается случай, когда в базе данных установлен тип списка "односвязный линейный список":
    if (bs->bus_station_type_of_list == '1') {


        // Если в базе данных нет записи не об одном автобусе:
        if (bs->bus_station_buses_linear_singly_linked_list->buses_first_bus == NULL) {


            cout << "- База данных пуста, если хотите ее заполнить c нуля, вызовите ф-цию ввода всех данных\n\n";


            return; // Прерываем выполнение функции типа void. Возвращаемся в цикл меню.


        } // Конец блока "Если в базе данных нет записи не об одном автобусе"


        // Вызовем функцию ввода всех данных из файла в линейный односвязный список:
        add_data_from_file(bs->bus_station_buses_linear_singly_linked_list);


    } // Конец блока "Сначала рассматривается случай, когда в базе данных установлен тип списка "односвязный линейный список""

    else { // Вторым рассматривается случай, когда в базе данных установлен тип списка "двухсвязный линейный список":


        // Если в базе данных нет записи не об одном автобусе:
        if (bs->bus_station_buses_linear_doubly_linked_list->buses_first_bus == NULL) {


            cout << "- База данных пуста, если хотите ее заполнить c нуля, вызовите ф-цию ввода всех данных\n\n";



            return; // Возвращаемся в меню



        } // Конец блока "сли в базе данных нет записи не об одном автобусе"


        // Вызовем функцию ввода всех данных из файла в линейный двухсвязный список:
        add_data_from_file(bs->bus_station_buses_linear_doubly_linked_list);

    }

}

// Добавить данные об автобусах с клавиатуры:
void console_menu_option_add_data_from_console(bus_station * bs) {


    cout << "\tДОБАВЛЕНИЕ ДАННЫХ ИЗ КОНСОЛИ\n\n";


    // Объявление переменных:

    string user_input; // Пользовательский ввод


    // Сначала рассматривается случай, когда в базе данных установлен тип списка "односвязный линейный список":
    if (bs->bus_station_type_of_list == '1') {


        // Если в базе данных нет записи не об одном автобусе:
        if (bs->bus_station_buses_linear_singly_linked_list->buses_first_bus == NULL) {


            cout << "- База данных пуста, если хотите ее заполнить c нуля, вызовите ф-цию ввода всех данных\n\n";


            return; // Прерываем выполнение функции типа void. Возвращаемся в цикл меню.


        } // Конец блока "Если в базе данных нет записи не об одном автобусе"


        // Вызовем функцию ввода всех данных из файла в линейный односвязный список:
        add_data_from_console(bs->bus_station_buses_linear_singly_linked_list);


    } // Конец блока "Сначала рассматривается случай, когда в базе данных установлен тип списка "односвязный линейный список""

    else { // Вторым рассматривается случай, когда в базе данных установлен тип списка "двухсвязный линейный список":


        // Если в базе данных нет записи не об одном автобусе:
        if (bs->bus_station_buses_linear_doubly_linked_list->buses_first_bus == NULL) {


            cout << "- База данных пуста, если хотите ее заполнить c нуля, вызовите ф-цию ввода всех данных\n\n";


            return; // Возвращаемся в меню



        } // Конец блока "сли в базе данных нет записи не об одном автобусе"


        // Вызовем функцию ввода всех данных из файла в линейный двухсвязный список:
        add_data_from_console(bs->bus_station_buses_linear_doubly_linked_list);

    }

}




// Изменить название автовокзала:
void console_menu_option_change_bus_station_name(bus_station* bs) {


    cout << "\tИЗМЕНЕНИЕ НАЗВАНИЯ АВТОВОКЗАЛА\n\n";


    string user_input; // Пользовательский ввод


    cout << "- Вы уверены что хотите изменить название автовокзала? (1 - да, 2 - вернуться в меню)\n\n";


    // Считывание ответа пользователя:
    user_input = get_user_input_with_conditions(0, "is_1_or_2");


    // Если пользователь решил вернуться в меню:
    if (user_input == "2") {

        return; // Возвращаемся в меню

    } // Конец блока "Если пользователь решил вернуться в меню"


    cout << "\n- Введите новое название автовокзала: ";


    // Ввод нового названия:
    cin.ignore();
    getline(cin, bs->bus_station_name);


} // Конец блока "Изменить название автовокзала"




// Изменить цену на билет автовокзала:
void console_menu_option_change_bus_station_ticket_price(bus_station* bs){


    cout << "\tИЗМЕНЕНИЕ ЦЕНЫ НА БИЛЕТ\n\n";


    string user_input; // Пользовательский ввод


    cout << "- Вы уверены что хотите изменить цену на билет? (1 - да, 2 - вернуться в меню)\n\n";


    // Считывание ответа пользователя:
    user_input = get_user_input_with_conditions(0, "is_1_or_2");


    // Если пользователь решил вернуться в меню:
    if (user_input == "2") {

        return; // Возвращаемся в меню

    } // Конец блока "Если пользователь решил вернуться в меню"


    cout << "\n- Введите новую цену на билет\n\n";


    // Ввод нового названия:
    bs->bus_station_ticket_price = stoi(get_user_input_with_conditions(0, "natural_number"));


} // Конец блока "Изменить цену на билет автовокзала"
