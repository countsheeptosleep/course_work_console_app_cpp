// --------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------
// ----------------------------------- Курсовая работа ----------------------------------------
// --------------------------------------------------------------------------------------------
// ----------------------Файл определение функций начала программы и меню----------------------
// --------------------------------------------------------------------------------------------




// Подключение стандартных библиотек:
#include <string>
#include <iostream>




// Подключение стандартного пространста имен: 
using namespace std;




// Подключение других файлов программы:

#include "structures_definition.h" // Файл с определением вводимых структур (включает, в частности, 
                                   // определение структуры автобусной станции bus_station, структуру списка автобусов и т.д.) 

#include "additional_functions.h" // Файл с заголовками дополнительных функций (таких как "является ли строка числом от 1 до n)

#include "menu_options_all_groups_together.h" // Файл с заголовками функций всех пяти групп опций меню (группа опций меню "Ввод", "Вывод" и 
                                              // т.д. - всего 5 таких групп, и в них в сумме 14 функций - "Ввод из консоли", "Ввод из файла" и т.д.).
                                              // То есть опции меню делятся на группы по смыслу, а в каждой группе есть по несколько конкретных функций.




// Объявление функций:




// Старт программы:
void console_menu(bus_station* bs); 

// Меню:
void console_programm_start(bus_station* bs); 




// Определение функций:




// Старт программы:
void console_programm_start(bus_station* bs) {


    // Объявление переменных:

    string list_type; // Тип списка, который будет использоваться в БД (линейный односвязный или линейный двухсвязный)

    string bus_station_name; // Название данной автобусной станции

    int bus_station_ticket_price; // Цена билета, установленная для проезда на всех автобусах данной станции


    // Приветственный заголовок:
    cout << "\n\t<< Система учета автобусов для автовокзала >>\n\n- Приветствуем!";


    // Приглашаем пользователя выбрать тип списка:
    cout << "Перед началом работы выберите, как будут храниться\n"
        "данные об автобусах: в виде линейных односвязных или двухсвязных списков\n"
        "1 - для односвязных списков, 2 - для двухсвязных списков\n\n";


    // Получаем от пользователя ответ о типе списка:
    list_type = get_user_input_with_conditions(0, "is_1_or_2"); // Получение ввода пользователя с проверкой на корректность: была ли введена единица или двойка


    // Приглашаем пользователя выбрать название для автовокзала и цену на билет 
    // для всех автобусов данной станции (позднее эти параметры можно будет изменить):
    cout << "\n- Для окончания предварительной настройки остается\n"
        "ввести название вашего автовокзала и цену за билет "
        "(эти настройки вы сможете изменить позже).\n\n"
        "Ввод: ";


    // Получаем от пользователя ответ с названием автовокзала:
    cin.ignore(); // Очистка буфера ввода
    getline(cin, bus_station_name); // Стандартный метод ввода, позволяющий считать строку из нескольких слов в одну переменную типа string
      

    // Получаем от пользователя ответ с ценой за билет:
    bus_station_ticket_price = stoi(get_user_input_with_conditions(0, "natural_number")); // Получение ввода пользователя с проверкой на корректность: было ли введено натуральное число


    // Если пользователь выбрал тип списка "линейный односвязный список", то создаем его, а двухсвязный список не используем: 
    if (list_type == "1") {

        bs->bus_station_name = bus_station_name; // Записываем в БД название автовокзала

        bs->bus_station_ticket_price = bus_station_ticket_price; // Записываем в БД цену за билет

        bs->bus_station_type_of_list = '1'; // Записываем в БД тип списка - линейный односвязный список ('1' - односвязный, '2' - двухсвязный)

        bs->bus_station_buses_linear_singly_linked_list = new buses_linear_singly_linked_list; // Выделяем в БД память под односвязный список

        bs->bus_station_buses_linear_singly_linked_list->buses_first_bus = NULL; // В списке пока нет ни одного автобуса, устанавливаем NULL для первого автобуса в списке

        bs->bus_station_buses_linear_doubly_linked_list = NULL; // Линейный двусвязный список не используется базой данных не используется

    } // Конец блока "Если пользователь выбрал тип списка "линейный односвязный список", то создаем его, а двухсвязный список не используем"


    // Если пользователь выбрал тип списка "линейный двухсвязный список", то создаем его, а односвязный список не используем: 
    if (list_type == "2") {

        bs->bus_station_name = bus_station_name; // Записываем в БД название автовокзала

        bs->bus_station_ticket_price = bus_station_ticket_price; // Записываем в БД цену за билет

        bs->bus_station_type_of_list = '2'; // Записываем в БД тип списка - линейный двухсвязный список ('1' - односвязный, '2' - двухсвязный)

        bs->bus_station_buses_linear_doubly_linked_list = new buses_linear_doubly_linked_list; // Выделяем в БД память под двухсвязный список

        bs->bus_station_buses_linear_doubly_linked_list->buses_first_bus = NULL; // В списке пока нет ни одного автобуса, устанавливаем NULL для первого автобуса в списке

        bs->bus_station_buses_linear_doubly_linked_list->buses_last_bus = NULL; // В списке пока нет ни одного автобуса, устанавливаем NULL для последнего автобуса в списке

        bs->bus_station_buses_linear_singly_linked_list = NULL; // Линейный односвязный список базой данных не используется

    } // Конец блоков "Если пользователь выбрал тип списка "линейный двухсвязный список", то создаем его, а односвязный список не используем"


    // Объявляем о завершении предварительной настройки программы:
    cout << "\n- Поздравляем, вы завершили предварительную настройку программы и переходите в ее главное меню\n\n";
        

    // Переводим пользователя в меню:
    console_menu(bs);


} // Конец блока "Старт программы"




// Меню:
void console_menu(bus_station* bs) {


    // Объявление переменных:

    string menu_option_str = ""; // Выбранная пользователем опция меню (в типе string)

    int menu_options_number = 14; // Число опций в меню


    // Цикл меню (прерывается только вызовом опции выхода):
    while (true) {


        // Печатаем содержание меню:
        cout << "\n\n---------------------------------------------------------------------------------------\n\n"

            "\t<< Автовокзал " << bs->bus_station_name << " >>\n\n"

            "[] Информация о вокзале:\n"
            " - Цена билета: " << bs->bus_station_ticket_price << "\n\n"

            "[] Список доступных опций (1-14):\n"

            "\n(1-6) Добавление или изменение данных:\n"
            "1 - ввести все данные об автобусах из файла (или заменить все текущие данные)\n"
            "2 - ввести все данные об автобусах с клавиатуры (или заменить все текущие данные)\n"
            "3 - добавить данные об автобусах из файла\n"
            "4 - добавить данные об автобусах с клавиатуры\n"
            "5 - изменить название автовокзала\n"
            "6 - изменить цену на билет автовокзала\n"

            "\n(7-10) Вывод данных:\n"
            "7 - вывод всех данных на экран\n"
            "8 - вывод всех данных в файл\n"
            "9 - вывод на экран данных по заданному условию\n"
            "10 - вывод в файл данных по заданному условию\n"

            "\n(11-12) Удаление данных:\n"
            "11 - удаление всех данных\n"
            "12 - удаление данных по заданному условию\n"

            "\n(13) Сортировка данных:\n"
            "13 - сортировка по заданному условию\n"

            "\n(14) Выход из программы:\n"
            "14 - закрыть программу\n\n\n";


        // Получаем от пользователя ответ, содержащий выбор одной из опций меню:
        menu_option_str = get_user_input_with_conditions(menu_options_number + 1, "lower_then_n"); // Получение ввода пользователя 
                                                                                                   // с проверкой на корректность:
                                                                                                   // было ли введено натуральное 
                                                                                                   // число меньшее menu_options_number + 1 -
                                                                                                   // то есть соответствует ли ввод 
                                                                                                   // пользователя одной из опций меню


        // Визуально отделим меню консоли от далее вызываемой функции:
        cout << "\n---------------------------------------------------------------------------------------\n\n";


        // В соответствии с пользовательским вводом выберем опцию и вызовем ее функцию:
        switch (stoi(menu_option_str)) { // stoi(menu_option_str) - это целочисленная запись
                                         // содержимого строки menu_option_str, то есть номер опции меню,
                                         // которую выбрал пользователь

        case 1:
            console_menu_option_input_data_from_file(bs); // Ввести все данные об автобусах из файла (или заменить все текущие данные)
            break;

        case 2:
            console_menu_option_input_data_from_console(bs); // Ввести все данные об автобусах с клавиатуры (или заменить все текущие данные)
            break;

        case 3:
            console_menu_option_add_data_from_file(bs); // Добавить данные об автобусах из файла
            break;

        case 4:
            console_menu_option_add_data_from_console(bs); // Добавить данные об автобусах с клавиатуры
            break;

        case 5:
            console_menu_option_change_bus_station_name(bs); // Изменить название автовокзала
            break;

        case 6:
            console_menu_option_change_bus_station_ticket_price(bs); // Изменить цену на билет автовокзала
            break;

        case 7:
            console_menu_option_output_all_data_to_console(bs); // Вывод всех данных на экран
            break;

        case 8:
            console_menu_option_output_all_data_to_file(bs); // Вывод всех данных в файл
            break;

        case 9:
            console_menu_option_output_choosen_data_to_console(bs); // Вывод на экран данных по заданному условию
            break;

        case 10:
            console_menu_option_output_choosen_data_to_file(bs);  // Вывод в файл данных по заданному условию
            break;

        case 11:
            console_menu_option_delete_all_data(bs); // Удаление всех данных
            break;

        case 12:
            console_menu_option_delete_choosen_data(bs); // Удаление выбранных данных
            break;

        case 13:
            console_menu_option_sort_data(bs); // Сортировка по заданному условию
            break;

        case 14:
            console_menu_option_exit_programm(bs); // Закрыть программу
            break;

        default: // Пользовательский ввод проверен на то, чтобы хотя бы одна из опций выше обязательно была вызвана. 
                 // Поэтому default никогда выполняться не должен.

            cout << "Error in menu function"; // Сообщение об ошибке

            exit(1); // Выход из программы с кодом ошибки 1

            break;


        } // Конец блока "В соответствии с пользовательским вводом выберем опцию и вызовем ее функцию"


    } // Конец блока "Цикл меню"


} // Конец блока "Меню"