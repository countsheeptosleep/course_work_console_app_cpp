// --------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------
// ----------------------------------- Курсовая работа ----------------------------------------
// --------------------------------------------------------------------------------------------
// -------------------------Файл определения дополнительных функций----------------------------
// --------------------------------------------------------------------------------------------




// Подключение необходимых библиотек:
#include <string>
#include <iostream>




// Подключение стандартного пространста имен: 
using namespace std;




// Подключение других файлов программы:

#include "structures_definition.h" // Файл с определением вводимых структур (включает, в частности, 
                                   // определение структуры автобусной станции bus_station, структуру списка автобусов и т.д.) 




// Объявление функций:




// Хранит ли база данных пустой список (true - если хранит пустой список; false - есть ли есть записи):
bool is_data_base_holding_empty_list(bus_station* bs);

// Является ли строка типа "string" натуральным числом:
bool is_string_number(string const& str);

// Окажется ли строка типа "string" при ее переводе в натуральное число меньшей некоторого заданного числа:
bool is_string_as_number_lower_then(string const& str, int const& n);

// Позволяет добиться от пользователя ввода, удовлетворяющего условиям:
string get_user_input_with_conditions(int const& n, string conditions);




// Определение функций:




// Хранит ли база данных пустой список (true - если хранит пустой список; false - есть ли есть записи):
bool is_data_base_holding_empty_list(bus_station* bs) {

    // Сначала рассматривается случай, когда в базе данных установлен тип списка "односвязный линейный список":
    if (bs->bus_station_type_of_list == '1') {

        // Если в базе данных нет записи ни об одном автобусе:
        if (bs->bus_station_buses_linear_singly_linked_list->buses_first_bus == NULL) {

            return true; 

        }

    }
    else { // Иначе рассматривается случай, когда в базе данных установлен тип списка "двухсвязный линейный список":

        // Если в базе данных нет записи ни об одном автобусе:
        if (bs->bus_station_buses_linear_doubly_linked_list->buses_first_bus == NULL) {

            return true;

        }

    }

    // В базе данных все-таки есть автобусы, то есть она хранит непустой список:
    return false;

} // Конец блока "Хранит ли база данных пустой список (true - если хранит пустой список; false - есть ли есть записи)"




// Функция "is_string_number" - является ли строка типа "string" натуральным числом
// Возвращаемые значения: true - если является, false - если не является
bool is_string_number(string const& str) {


    // Используем продвинутые методы работы со строками, чтобы определить, является ли строка числом:
    return !str.empty() && str.find_first_not_of("0123456789") == string::npos;


} // Конец блока "Функция "is_string_number" - является ли строка типа "string" натуральным числом"




// Функция "is_string_as_number_lower_then" - окажется ли строка типа "string" при ее переводе в натуральное число меньшей некоторого заданного числа
// Возвращаемые значения: true - если окажется, false - если не окажется
bool is_string_as_number_lower_then(string const& str, int const& n) {


    // Если строка не является числом, возвращаем ноль:
    if (!is_string_number(str)) return 0;


    // Переводим строку в число:
    int string_in_int = std::stoi(str);


    // Сравниваем строку в виде числа с заданным числом n:
    if (string_in_int < n && string_in_int >=1) return 1;
    else return 0;


} // Конец блока "Функция "is_string_as_number_lower_then" - окажется ли строка типа "string" при ее переводе в натуральное число меньшей некоторого заданного числа"




// Функция "get_user_input_with_conditions" - позволяет добиться от пользователя ввода, удовлетворяющего условиям
// Возвращаемые значения: строка, соответствующая необходимым условиям
string get_user_input_with_conditions(int const& n, string conditions) {


    // Объявление переменных:

    bool choosen_condition; // Булеан, соответствующий выбранному условию

    string user_input; // Пользовательский ввод

    string input_prompt = "Ввод: "; // Сообщение: приглашение к вводу

    string error_message = "- Неккоретный ввод данных. Попробуйте еще раз."; // Сообщение: сообщение об ошибке
    

    // Приглашение пользователя к вводу:
    cout << input_prompt;


    // Считывание ответа пользователя:
    cin >> user_input;


    // Булеан определяется в соответствии с заданным услвоие:
    if (conditions == "lower_then_n") { // Строка - это натуральное число, меньшее n


        // Условие, что строка - это число меньшее заданного
        choosen_condition = is_string_as_number_lower_then(user_input, n);


    }
    else if (conditions == "is_1_or_2") { // Строка - это числа 1 или 2


        // Условие, что строка - это 1 или 2 
        choosen_condition = (user_input == "1") || (user_input == "2");


    }
    else if (conditions == "natural_number") { // Строка - это натуральное число


        // Условие, что строка - это натуральное число
        choosen_condition = is_string_number(user_input);


    }
    else { // Неккоректное условие - не должно быть вызвано


        cout << "Error in get_user_input_with_conditions()";


        exit(1); // Завершение программы с кодом ошибки 1


    } // Конец блока "Выбираем булеан"


    // Проверка ответа пользователя на корректность и повторение ввода:
    while (!choosen_condition) {


        // Сообщение пользователю о неккоректном вводе и приглашение к повторному вводу:
        cout << error_message << endl << input_prompt;


        // Повторное считывание ответа пользователя:
        cin >> user_input;


        // Выбираем булеан:
        if (conditions == "lower_then_n") { // Строка - это натуральное число, меньшее n


            // Условие, что строка - это число меньшее заданного
            choosen_condition = is_string_as_number_lower_then(user_input, n);


        }
        else if (conditions == "is_1_or_2") { // Строка - это числа 1 или 2


            // Условие, что строка - это 1 или 2 
            choosen_condition = (user_input == "1") || (user_input == "2");


        } 
        else if (conditions == "natural_number") { // Строка - это натуральное число


            // Условие, что строка - это натуральное число
            choosen_condition = is_string_number(user_input);


        }// Конец блока "Выбираем булеан"


    } // Конец блока "Проверка ответа пользователя на корректность и повторение ввода"
    

    // Возвращаем полученный пользовательский ввод:
    return user_input;


} // Конец блока "Позволяет добиться от пользователя корректного ввода числа меньшего n"